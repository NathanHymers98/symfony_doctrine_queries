<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FortuneCookieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FortuneCookieRepository extends EntityRepository
{
    public function countNumberPrintedForCategory(Category $category) // Returns the total sum of fortune cookies that have been printed
    {
        $connection = $this->getEntityManager() // Getting the DBAL connection object
            ->getConnection();

        // The raw SQL query below finds the exact same information as the DQL query below.
        $sql = '
            SELECT SUM(fc.numberPrinted) as fortunesPrinted, AVG(fc.numberPrinted) as fortunesAverage, cat.name
            FROM fortune_cookie fc
            INNER JOIN category cat ON cat.id = fc.category_id
            WHERE fc.category_id = :category
            ';
        $statement = $connection->prepare($sql);
        $statement->execute(array('category' => $category->getId()));
        return $statement->fetch();



        return $this->createQueryBuilder('fc')
            ->andWhere('fc.category = :category')
            ->setParameter('category', $category)
            ->innerJoin('fc.category', 'cat')
            ->select('SUM(fc.numberPrinted) as fortunesPrinted, AVG(fc.numberPrinted) as fortunesAverage, cat.name') // Since the query builder automatically selects everything from the FortuneCookie class, we add our own select() method to clear out the previous select and add our own
                                                                                                                        // Which in this case we only want the sum of how many fortune cookies have been printed as the variable fortunesPrinted
                                                                                                                        // We can also select more fields by just adding a comma and continuing the same format. AVG just means get the average number of the column numberPrinted and set it to the alias fortunesAverage
                                                                                                                        // We are also fetching the category name column
            ->getQuery()
            ->getOneOrNullResult();
    }
}
